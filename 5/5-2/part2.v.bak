module part1(SW, HEX0, CLOCK_50);
    input [3:0] SW;
	 input CLOCK_50; 
	 output [6:0] HEX0;
	 wire enable;
	 wire clear_b;
	 wire clock;
	 wire [7:0] t_t;
	 wire [3:0] h1;
	 wire [3:0] h2;
	 assign clock = KEY[0];
	 assign enable = SW[1];
	 assign clear_b = SW[0];
endmodule
	 
	 
	 
module shifter_bit(out, d, clock, reset_n, par_load, enable);
	 output out;
	 wire [3:0] d;
    wire clock;
    wire reset_n;
    wire par_load, enable;
    reg [3:0]q;
    always @(posedge clock)
	     if (reset_n == 1’b0)
		      q <= 0;
		  else if (par_load == 1’b1)
		      q <= d;
        else if (enable == 1’b1)
		     begin
			     if ( q == 4’b1111 )
			        q <= 0;
			     else
				     q <= q + 1’b1;
           end
			  

 